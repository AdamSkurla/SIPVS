// Input 0
'use strict';var ditec = ditec || {};
ditec.versions = ditec.versions || {};
ditec.versions.dCommon = "1.5.0.0";
// Input 1
var ditec = ditec || {};
ditec.utils = ditec.utils || {};
(function() {
  ditec.utils.ERROR_CANCELLED = 1;
  ditec.utils.ERROR_GENERAL = -200;
  ditec.utils.ERROR_NOT_INSTALLED = -201;
  ditec.utils.ERROR_LAUNCH_FAILED = -202;
  ditec.utils.ERROR_LAUNCH_FORBIDDEN = -203;
  ditec.utils.extendClass = function(child, parent) {
    var F = function() {
    };
    F.prototype = parent.prototype;
    child.prototype = new F;
    child._superClass = parent.prototype;
    child.prototype.constructor = child;
    for (var member in child) {
      child.prototype[member] = child[member];
    }
    for (var member in parent) {
      child[member] = parent[member];
      child.prototype[member] = parent[member];
    }
  };
  ditec.utils.mergeObjects = function(obj1, obj2) {
    var ret = {};
    for (var member in obj1) {
      ret[member] = obj1[member];
    }
    for (var member in obj2) {
      if (!(member in ret)) {
        ret[member] = obj2[member];
      }
    }
    return ret;
  };
  ditec.utils.docWriteWrapper = function(elm, func, filter) {
    var oldwrite = document.write;
    var content = "";
    document.write = function(text) {
      if (filter) {
        text = filter(text);
      }
      content += text;
    };
    func();
    elm.innerHTML += content;
    document.write = oldwrite;
  };
  ditec.utils.isDitecError = function(e) {
    return e != null && typeof e === "object" && "name" in e && e.name === "DitecError";
  };
  ditec.utils.createDitecError = function(error, code, msg, detail) {
    if (!error) {
      error = new Error;
    }
    error.name = "DitecError";
    error.message = msg;
    error.code = code || ditec.utils.ERROR_GENERAL;
    error.detail = detail;
    error.toString = function() {
      return error.name + "(" + error.code + ") " + error.message;
    };
    return error;
  };
  var lastId = 0;
  ditec.utils.createId = function(prefix) {
    if (!prefix) {
      prefix = "DitecId";
    }
    return prefix + ++lastId;
  };
  ditec.utils.parseDateIso8601 = function(s) {
    if (!s) {
      return null;
    }
    var patt = new RegExp(/(\d{4,})-(\d{1,2})-(\d{1,2})T(\d{1,2}):(\d{1,2}):(\d{1,2})/);
    var res = patt.exec(s);
    if (!res) {
      throw new Error("Nespravny format datumu a casu: " + s);
    }
    if (res[1] < 1900) {
      return null;
    }
    return new Date(Date.UTC(res[1], res[2] - 1, res[3], res[4], res[5], res[6]));
  };
  ditec.utils.generateGuid = function() {
    function s4() {
      return Math.floor((1 + Math.random()) * 65536).toString(16).substring(1);
    }
    return s4() + s4() + "-" + s4() + "-" + s4() + "-" + s4() + "-" + s4() + s4() + s4();
  };
  var _getBrowserType = function() {
    var ua = navigator.userAgent, tem, M = ua.match(/(opera|chrome|safari|firefox|msie|trident(?=\/))\/?\s*(\d+)/i) || [];
    if (/trident/i.test(M[1])) {
      tem = /\brv[ :]+(\d+)/g.exec(ua) || [];
      return {name:"msie", version:tem[1] || ""};
    }
    if (M[1] === "Chrome") {
      tem = ua.match(/\bOPR\/(\d+)/);
      if (tem != null) {
        return {name:"opera", version:tem[1]};
      }
      tem = ua.match(/\bEdge\/(\d+)/);
      if (tem != null) {
        return {name:"edge", version:tem[1]};
      }
    }
    M = M[2] ? [M[1], M[2]] : [navigator.appName, navigator.appVersion, "-?"];
    if ((tem = ua.match(/version\/(\d+)/i)) != null) {
      M.splice(1, 1, tem[1]);
    }
    return {name:M[0].toLowerCase(), version:M[1]};
  };
  var browserType = null;
  ditec.utils.getBrowserType = function() {
    if (!browserType) {
      browserType = _getBrowserType();
    }
    return browserType;
  };
  ditec.utils.isWindows = function() {
    return navigator.userAgent.indexOf("Windows") != -1;
  };
  ditec.utils.ChainedCallback = function(parent, onSuccess) {
    this._onSuccess = onSuccess;
    this._parent = parent;
  };
  ditec.utils.ChainedCallback.prototype.onSuccess = function() {
    try {
      this._onSuccess.apply(this, arguments);
    } catch (e) {
      this.onError(e);
    }
  };
  ditec.utils.ChainedCallback.prototype.onError = function(e) {
    if (this._parent == null) {
      throw e;
    } else {
      this._parent.onError(e);
    }
  };
  ditec.utils.ChainedCallback.prototype._return = function() {
    this._parent.onSuccess.apply(this._parent, arguments);
  };
  ditec.utils.CallbackWrapper = function(originalCallback) {
    if (originalCallback && !(typeof originalCallback === "object")) {
      throw ditec.utils.createDitecError(new Error, this.ERROR_GENERAL, 'Parameter "callback" mus\u00ed by\u0165 typu "object"');
    }
    this._originalCallback = originalCallback;
  };
  ditec.utils.CallbackWrapper.prototype.onStart = function() {
    var self = this;
    var args = arguments;
    if (self._originalCallback && self._originalCallback.onStart) {
      self._originalCallback.onStart.apply(self._originalCallback, args);
    }
  };
  ditec.utils.CallbackWrapper.prototype.onSuccess = function() {
    var self = this;
    var args = arguments;
    if (self._originalCallback && self._originalCallback.onSuccess) {
      setTimeout(function() {
        self._originalCallback.onSuccess.apply(self._originalCallback, args);
      }, 0);
    }
  };
  ditec.utils.CallbackWrapper.prototype.onError = function(e) {
    var self = this;
    var args = arguments;
    if (self._originalCallback && self._originalCallback.onError) {
      setTimeout(function() {
        self._originalCallback.onError.apply(self._originalCallback, args);
      }, 0);
    } else {
      throw e;
    }
  };
  var deployJavaPlugin = null;
  ditec.utils.isJavaInstalled = function() {
    var m = navigator.mimeTypes["application/x-java-applet"];
    if (m && m.enabledPlugin) {
      return true;
    }
    if ("ActiveXObject" in window) {
      if (deployJavaPlugin == null) {
        deployJavaPlugin = document.createElement("object");
        deployJavaPlugin.setAttribute("classid", "clsid:CAFEEFAC-DEC7-0000-0001-ABCDEFFEDCBA");
        deployJavaPlugin.setAttribute("width", "0");
        deployJavaPlugin.setAttribute("height", "0");
        document.body.appendChild(deployJavaPlugin);
      }
      if (deployJavaPlugin && deployJavaPlugin.jvms && deployJavaPlugin.jvms.getLength() > 0) {
        return true;
      }
    }
    return false;
  };
  var callbacks = {};
  var msgId = 0;
  ditec.utils.callbackManager = {_generateMsgId:function() {
    return msgId++ + "-" + (new Date).getTime();
  }, addCallback:function(timeout, callback) {
    var id = this._generateMsgId();
    callbacks[id] = callback;
    if (timeout > 0) {
      setTimeout(function() {
        var callback = callbacks[id];
        if (callback) {
          delete callbacks[id];
          callback.onError(ditec.utils.createDitecError(new Error, -200, "Odpoved neprisla do stanoveneho casu"));
        }
      }, timeout);
    }
    return id;
  }, removeCallback:function(id) {
    var callback = callbacks[id];
    if (callback) {
      delete callbacks[id];
    }
    return callback;
  }};
})();
// Input 2
var ditec = ditec || {};
(function() {
  if (typeof MozWebSocket == "function") {
    WebSocket = MozWebSocket;
  }
  var Worker = function(hostnames, port, token, callback) {
    this._hostnames = hostnames;
    this._hostnamesI = 0;
    this._port = port;
    this._token = token;
    this._callback = callback;
    this._stopFlag = false;
    var self = this;
    var callbackFunc = function(url) {
      if (!url && !self.stopFlag) {
        self._connect(callbackFunc);
      } else {
        if (url) {
          callback.onSuccess(url);
        }
      }
    };
    callbackFunc(null);
  };
  Worker.prototype.stop = function() {
    this.stopFlag = true;
  };
  Worker.prototype._connect = function(callbackFunc) {
    var self = this;
    var url = null;
    var ws = new WebSocket("wss://" + this._hostnames[this._hostnamesI] + ":" + this._port + "/getUrl/" + this._token);
    this._hostnamesI = (this._hostnamesI + 1) % this._hostnames.length;
    ws.onmessage = function(evt) {
      try {
        var msg = JSON.parse(evt.data);
        if (msg.method === "hello" && msg.params && msg.params.url) {
          url = msg.params.url;
        }
        ws.close();
      } catch (e) {
      }
    };
    var timeout = setTimeout(function() {
      ws.close();
    }, 1E4);
    ws.onclose = function() {
      clearTimeout(timeout);
      setTimeout(function() {
        callbackFunc(url);
      }, 1E3);
    };
  };
  function generatePortNumber() {
    return Math.floor(Math.random() * (65535 - 49152)) + 49152;
  }
  function generateNextPortNumber(port) {
    var rel = port - 49152;
    rel = (rel + 123) % (65535 - 49152);
    return rel + 49152;
  }
  ditec.dLauncher = {_hostnames:ditec.utils.getBrowserType().name === "edge" ? ["dlauncher6.ditec.sk"] : ["dlauncher.ditec.sk"], _hostnamesIp:ditec.utils.getBrowserType().name === "edge" ? ["fd6d-c83b-5cef-b6b2--2.ipv6-literal.net"] : ["127.0.0.1"], _anchor:null, _ports:[generatePortNumber(), generatePortNumber(), generatePortNumber()], _token:ditec.utils.generateGuid(), _cancelFlag:false, _workers:[], _startLauncherCallback:null, _stopWorkers:function() {
    for (var i = 0;i < this._workers.length;i++) {
      this._workers[i].stop();
    }
    this._workers = [];
  }, _getFrame:function() {
    if (!this._frame) {
      var f = document.createElement("iframe");
      f.style.display = "none";
      f.name = ditec.utils.createId("DitecDLauncherFrame");
      document.body.appendChild(f);
      this._frame = f;
    }
    return this._frame;
  }, getStartUrl:function() {
    var browser = ditec.utils.getBrowserType();
    var ports = this._ports.join();
    var hostnames = this._hostnames.join();
    return "ditec-dlauncher:?hostnames=" + hostnames + "&ports=" + ports + "&token=" + this._token + "&browser=" + browser.name + "_" + browser.version;
  }, openStartUrl:function() {
    var f = this._getFrame();
    f.src = this.getStartUrl();
  }, startLauncherCancel:function() {
    this._stopWorkers();
    if (this._startLauncherCallback) {
      var callback = this._startLauncherCallback;
      this._startLauncherCallback = null;
      callback.onError(ditec.utils.createDitecError(new Error, -200, "Prerusene"));
    }
  }, startLauncher:function(callback) {
    this._ports = [generatePortNumber(), generatePortNumber(), generatePortNumber()];
    this.openStartUrl();
    var self = this;
    this._startLauncherCallback = callback;
    var rcallback = {onSuccess:function(url) {
      if (url) {
        self._stopWorkers();
        if (self._startLauncherCallback) {
          var callback = self._startLauncherCallback;
          self._startLauncherCallback = null;
          callback.onSuccess(url);
        }
      }
    }, onError:function(e) {
    }};
    var token = this._token;
    for (var i = 0;i < this._hostnames.length;i++) {
      for (var ii = 0;ii < this._ports.length;ii++) {
        var hostnames;
        if (ii % 2 == 0) {
          hostnames = [this._hostnames[i], this._hostnamesIp[i]];
        } else {
          hostnames = [this._hostnamesIp[i], this._hostnames[i]];
        }
        var w = new Worker(hostnames, this._ports[ii] + i, token, rcallback);
        this._workers.push(w);
      }
    }
  }, launchApplication:function(dLauncherUrl, applicationUri, javaXmx, javaXms, javaXss, callback) {
    callback = new ditec.utils.CallbackWrapper(callback);
    try {
      var websocket = new WebSocket(dLauncherUrl);
      var connected = false;
      var opened = false;
      var callbackHandled = false;
      websocket.onopen = function(evt) {
        opened = true;
      };
      websocket.onmessage = function(evt) {
        try {
          var o = JSON.parse(evt.data);
          if (o.method === "hello") {
            connected = true;
            var json = {"jsonrpc":"2.0", "id":null, "method":"dlauncher.launch", "params":{"url":applicationUri}};
            if (javaXmx) {
              json.params.javaXmx = javaXmx;
            }
            if (javaXms) {
              json.params.javaXms = javaXms;
            }
            if (javaXss) {
              json.params.javaXss = javaXss;
            }
            websocket.send(JSON.stringify(json));
          } else {
            if (o.method === "dlauncher.launchStatus" && o.params.state === "listening") {
              callbackHandled = true;
              callback.onSuccess(o.params);
            } else {
              if (o.method === "dlauncher.launchStatus" && o.params.state === "error") {
                callbackHandled = true;
                callback.onError(ditec.utils.createDitecError(new Error, o.params.code, "D.Launcher: " + o.params.message));
              }
            }
          }
        } catch (e) {
          callbackHandled = true;
          websocket.close();
          callback.onError(e);
        }
      };
      websocket.onerror = function(evt) {
        websocket.close();
      };
      websocket.onclose = function(evt) {
        if (callbackHandled) {
          return;
        } else {
          if (connected) {
            callback.onError(ditec.utils.createDitecError(new Error, ditec.utils.ERROR_LAUNCH_FAILED, "D.Launcher: Nepodarilo sa spustit pozadovanu aplikaciu."));
          } else {
            if (opened) {
              callback.onError(ditec.utils.createDitecError(new Error, null, "D.Launcher: Spojenie bolo neocakavane prerusene."));
            } else {
              callback.onError(ditec.utils.createDitecError(new Error, null, 'D.Launcher: Nepodarilo sa vytvorit spojenie na "' + dLauncherUrl + '".'));
            }
          }
        }
      };
    } catch (e) {
      callback.onError(ditec.utils.createDitecError(new Error, null, "D.Launcher: Nepodarilo sa instancovat WebSocket.", e));
    }
  }};
})();
// Input 3
var ditec = ditec || {};
ditec.AbstractDotNetWrapper = function(engineName, options, activeXClassNames) {
  this._engineName = engineName;
  this._options = options;
  this._activeXClassNames = activeXClassNames;
  this._core = null;
};
ditec.AbstractDotNetWrapper.prototype._onDeployed = function() {
};
ditec.AbstractDotNetWrapper.prototype.engineDeploy = function(callback) {
  try {
    var platform = navigator.platform;
    if (!platform || platform.toLowerCase() != "win32") {
      throw ditec.AbstractJsCore._createError(new Error, ditec.AbstractJsCore.ERROR_GENERAL, this._engineName + " nepodporuje platformu: " + platform + ".");
    }
    if (!("ActiveXObject" in window)) {
      throw ditec.AbstractJsCore._createError(new Error, ditec.AbstractJsCore.ERROR_GENERAL, "Prehliadac nepodporuje ActiveX.");
    }
    var core = {};
    for (var clazz in this._activeXClassNames) {
      if (!this._activeXClassNames.hasOwnProperty(clazz)) {
        continue;
      }
      try {
        var instance = new ActiveXObject(this._activeXClassNames[clazz]);
        core[clazz] = instance;
      } catch (e) {
        throw ditec.AbstractJsCore._createError(new Error, ditec.AbstractJsCore.ERROR_GENERAL, "Nepodarilo sa vytvorit in\u0161tanciu produktu " + this._engineName + " ActiveX (" + this._activeXClassNames[clazz] + ").");
      }
    }
    this._core = core;
    this._onDeployed();
    callback.onSuccess();
  } catch (e) {
    callback.onError(e);
  }
};
ditec.AbstractDotNetWrapper.prototype.engineUnDeploy = function() {
  this._core = null;
};
// Input 4
var ditec = ditec || {};
ditec.AbstractDummyWrapper = function(engineName, options) {
  this._engineName = engineName;
  this._options = options;
};
ditec.AbstractDummyWrapper.prototype._onDeployed = function() {
};
ditec.AbstractDummyWrapper.prototype.engineDeploy = function(callback) {
  try {
    throw ditec.AbstractJsCore._createError(new Error, ditec.AbstractJsCore.ERROR_GENERAL, "Modul " + this._engineName + " nie je podporovan\u00fd.");
  } catch (e) {
    callback.onError(e);
  }
};
ditec.AbstractDummyWrapper.prototype.engineUnDeploy = function() {
};
// Input 5
var ditec = ditec || {};
(function() {
  var WRAP_LIMIT = 1 * 1024 * 1024;
  ditec.AbstractJavaWrapper = function(engineName, options) {
    this._engineName = engineName;
    this._options = options;
    this._core = null;
    this._deployCallback = null;
  };
  ditec.AbstractJavaWrapper.prototype._checkInitialization = function() {
  };
  ditec.AbstractJavaWrapper.prototype._wrapString = function(value) {
    if (!value || value.length <= WRAP_LIMIT) {
      return value;
    } else {
      return new ditec.WrappedString(value);
    }
  };
  ditec.AbstractJavaWrapper.prototype._ChainedCallback = function(parent, onSuccess) {
    this._onSuccess = onSuccess;
    this._parent = parent;
  };
  ditec.AbstractJavaWrapper.prototype._ChainedCallback.prototype.onSuccess = function() {
    try {
      this._onSuccess.apply(this, arguments);
    } catch (e) {
      this.onError(e);
    }
  };
  ditec.AbstractJavaWrapper.prototype._ChainedCallback.prototype.onError = function(e) {
    if (this._parent == null) {
      throw e;
    } else {
      this._parent.onError(e);
    }
  };
  ditec.AbstractJavaWrapper.prototype._ChainedCallback.prototype._return = function() {
    this._parent.onSuccess.apply(this._parent, arguments);
  };
  ditec.AbstractJavaWrapper.prototype._JavaCallback = function(parent, onComplete) {
    this._onComplete = onComplete;
    this._parent = parent;
  };
  ditec.AbstractJavaWrapper.prototype._JavaCallback.prototype.onComplete = function() {
    try {
      this._onComplete.apply(this, arguments);
    } catch (e) {
      this._onError(e);
    }
  };
  ditec.AbstractJavaWrapper.prototype._JavaCallback.prototype._onError = function(e) {
    if (this._parent == null) {
      throw e;
    } else {
      this._parent.onError(e);
    }
  };
  ditec.AbstractJavaWrapper.prototype._JavaCallback.prototype.onException = function(msg, stackTrace, instance) {
    var txt = msg + "\n" + stackTrace;
    this._onError(ditec.AbstractJsCore._createError(new Error, ditec.AbstractJsCore.ERROR_GENERAL, txt));
  };
  ditec.AbstractJavaWrapper.prototype._JavaCallback.prototype._return = function() {
    this._parent.onSuccess.apply(this._parent, arguments);
  };
  ditec.AbstractJavaWrapper.prototype._fireDitecError = function(callback, error, code, object) {
    var self = this;
    object.getErrorMessage(new this._JavaCallback(callback, function(msg) {
      throw ditec.AbstractJsCore._createError(error, code, msg.str());
    }));
  };
  ditec.AbstractJavaWrapper.prototype.engineDeploy = function(callback) {
    try {
      if (!this._options["applet.jnlpUrl"]) {
        throw ditec.AbstractJsCore._createError(new Error, ditec.AbstractJsCore.ERROR_GENERAL, "JNLP subor nebol definovany. Vypinam podporu Javy.");
      }
      if (!ditec.utils.isJavaInstalled()) {
        throw ditec.AbstractJsCore._createError(new Error, ditec.utils.ERROR_NOT_INSTALLED, "Nebola detegovan\u00e1 po\u017eadovan\u00e1 verzia Javy.");
      }
      var attrs = this._options["applet.attributes"];
      var id = attrs["id"];
      if (!id) {
        id = ditec.utils.createId("DitecAppletId");
        attrs["id"] = id;
      }
      callbackName = id + "Callback";
      var self = this;
      self._deployCallback = callback;
      window[callbackName] = function() {
        try {
          self._checkInitialization.call(self);
          if (self._deployCallback) {
            var c = self._deployCallback;
            self._deployCallback = null;
            c.onSuccess();
          }
        } catch (e) {
          if (self._deployCallback) {
            var c = self._deployCallback;
            self._deployCallback = null;
            c.onError(e);
          }
        }
      };
      var params = this._options["applet.parameters"] || {};
      params["jnlp_href"] = this._options["applet.jnlpUrl"];
      params["onLoadCallbackName"] = callbackName;
      params["java_arguments"] = params["java_arguments"] || "";
      if (this._options["applet.javaXmx"]) {
        params["java_arguments"] = params["java_arguments"] + " -Xmx" + this._options["applet.javaXmx"];
      }
      if (this._options["applet.javaXms"]) {
        params["java_arguments"] = params["java_arguments"] + " -Xms" + this._options["applet.javaXms"];
      }
      if (this._options["applet.javaXss"]) {
        params["java_arguments"] = params["java_arguments"] + " -Xss" + this._options["applet.javaXss"];
      }
      var targetElement = this._options["object.targetElement"] || document.body;
      var self = this;
      var applet = document.createElement("applet");
      for (var key in attrs) {
        if (attrs.hasOwnProperty(key)) {
          applet.setAttribute(key, attrs[key]);
        }
      }
      applet.style.cssText = this._options["object.style"];
      for (var key in params) {
        if (params.hasOwnProperty(key)) {
          var param = document.createElement("param");
          param.setAttribute("value", params[key]);
          param.setAttribute("name", key);
          applet.appendChild(param);
        }
      }
      targetElement.appendChild(applet);
      this._core = applet;
    } catch (e) {
      callback.onError(e);
    }
  };
  ditec.AbstractJavaWrapper.prototype.engineUnDeploy = function() {
    if (this._core) {
      this._core.parentNode.removeChild(this._core);
      this._core = null;
      if (this._deployCallback) {
        var c = this._deployCallback;
        this._deployCallback = null;
        c.onError(ditec.utils.createDitecError(new Error, ditec.utils.ERROR_CANCELLED));
      }
    }
  };
})();
// Input 6
var ditec = ditec || {};
(function() {
  var SHORT_STRING_LENGTH = 1024;
  ditec.AbstractJsCore = function(appName, spiMap, config) {
    this._ready = false;
    this._spi = null;
    this._platform = null;
    this._appName = appName;
    this._spiMap = spiMap;
    this._config = config || {};
    this._uiEnabled = false;
    this._options = null;
  };
  ditec.AbstractJsCore.PLATFORM_JAVA = "java";
  ditec.AbstractJsCore.PLATFORM_DOT_NET = "dotNet";
  ditec.AbstractJsCore.PLATFORM_DLAUNCHER_JAVA = "dLauncherJava";
  ditec.AbstractJsCore.PLATFORM_DLAUNCHER_DOT_NET = "dLauncherDotNet";
  ditec.AbstractJsCore.PLATFORM_DLAUNCHER2 = "dLauncher2";
  function setCookie(cname, value) {
    document.cookie = cname + "=" + value + "; expires=0; path=/";
  }
  function getCookie(cname) {
    var name = cname + "=";
    var ca = document.cookie.split(";");
    for (var i = 0;i < ca.length;i++) {
      var c = ca[i];
      while (c.charAt(0) == " ") {
        c = c.substring(1);
      }
      if (c.indexOf(name) == 0) {
        return c.substring(name.length, c.length);
      }
    }
    return "";
  }
  function isDLauncherPlatform(platform) {
    return platform === ditec.AbstractJsCore.PLATFORM_DLAUNCHER_JAVA || platform === ditec.AbstractJsCore.PLATFORM_DLAUNCHER_DOT_NET;
  }
  ditec.AbstractJsCore._createError = function(error, code, msg) {
    return ditec.utils.createDitecError(error, code, msg);
  };
  ditec.AbstractJsCore.prototype._validateParameter = function(value, name, dataType, optional) {
    if (optional === true && value == null) {
      return;
    } else {
      if (value == null) {
        throw ditec.AbstractJsCore._createError(new Error, ditec.utils.ERROR_GENERAL, 'Parameter "' + name + '" je povinn\u00fd');
      }
    }
    switch(dataType) {
      case "string":
        if (typeof value !== "string") {
          throw ditec.AbstractJsCore._createError(new Error, ditec.utils.ERROR_GENERAL, 'Hodnota parameteru "' + name + '" mus\u00ed by\u0165 re\u0165azec.');
        }
        break;
      case "short_string":
        if (typeof value !== "string" || value.length > SHORT_STRING_LENGTH) {
          throw ditec.AbstractJsCore._createError(new Error, ditec.utils.ERROR_GENERAL, 'Hodnota parameteru "' + name + '" mus\u00ed by\u0165 re\u0165azec krat\u0161\u00ed ako ' + SHORT_STRING_LENGTH + " znakov.");
        }
        break;
      case "int":
        if (typeof value !== "number" || value % 1 !== 0) {
          throw ditec.AbstractJsCore._createError(new Error, ditec.utils.ERROR_GENERAL, 'Hodnota parameteru "' + name + '" mus\u00ed by\u0165 cel\u00e9 \u010d\u00edslo.');
        }
        break;
      case "dom_element":
        break;
      default:
        if (typeof value !== dataType) {
          throw ditec.AbstractJsCore._createError(new Error, ditec.utils.ERROR_GENERAL, 'Hodnota parameteru "' + name + '" mus\u00ed by\u0165 typu "' + dataType + '".');
        }
      ;
    }
  };
  ditec.AbstractJsCore.prototype._wrapFunction = function(callback, f, ignoreSpiCheck) {
    var wrappedCallback = new ditec.utils.CallbackWrapper(callback);
    try {
      if (!ignoreSpiCheck && (!this._spi || !this._ready)) {
        throw ditec.AbstractJsCore._createError(new Error, this.ERROR_GENERAL, "Aplikacie nie je nasadena");
      }
      wrappedCallback.onStart();
      f.call(this, wrappedCallback);
    } catch (e) {
      wrappedCallback.onError(e);
    }
  };
  ditec.AbstractJsCore.prototype.log = function(msg, o) {
    try {
      var s = "";
      if ("_appName" in this) {
        s = s + this._appName + ": ";
      }
      s = s + msg;
      if (o != null) {
        s += "\nStr:" + o;
        if (ditec.utils.isDitecError(o)) {
          s += "\nDetails: " + o.details;
        }
        var stack = o.stack;
        if (stack) {
          s += "\nStack: " + stack;
        }
        try {
          s += "\nJson: " + JSON.stringify(o);
        } catch (e) {
        }
      }
      if ("console" in window && "log" in window.console) {
        if (o != null) {
          console.log(s + "\n", o);
        } else {
          console.log(s);
        }
      }
      return s;
    } catch (e) {
      return msg;
    }
  };
  ditec.AbstractJsCore.prototype.detectSupportedPlatforms = function(platforms, callback) {
    this._wrapFunction(callback, function(wCallback) {
      if (!platforms) {
        platforms = [this.PLATFORM_JAVA, this.PLATFORM_DOT_NET, this.PLATFORM_DLAUNCHER2, this.PLATFORM_DLAUNCHER_JAVA, this.PLATFORM_DLAUNCHER_DOT_NET];
      }
      if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {
        wCallback.onSuccess([]);
        return;
      }
      var ret = [];
      var browser = ditec.utils.getBrowserType();
      var windows = ditec.utils.isWindows();
      var wsSupported = !!window.WebSocket;
      for (var i = 0;i < platforms.length;i++) {
        var p = platforms[i];
        switch(p) {
          case this.PLATFORM_DLAUNCHER2:
            ret.push(p);
            break;
          case this.PLATFORM_DLAUNCHER_JAVA:
            if (browser.name !== "msie" && wsSupported || browser.name === "msie" && (browser.version == "11" || browser.version == "10")) {
              ret.push(p);
            }
            break;
          case this.PLATFORM_DLAUNCHER_DOT_NET:
            if (windows && (browser.name !== "msie" && wsSupported) || browser.name === "msie" && (browser.version == "11" || browser.version == "10")) {
              ret.push(p);
            }
            break;
          case this.PLATFORM_JAVA:
            if (browser.name === "msie") {
              ret.push(p);
            }
            break;
          case this.PLATFORM_DOT_NET:
            if (windows && browser.name === "msie") {
              ret.push(p);
            }
            break;
        }
      }
      wCallback.onSuccess(ret);
    }, true);
  };
  ditec.AbstractJsCore.prototype._deployPlatform = function(platform, callback) {
    var spiClass = this._spiMap[platform];
    if (!spiClass) {
      callback.onError(ditec.AbstractJsCore._createError(new Error, this.ERROR_GENERAL, 'Platforma "' + this._platform + '" nie je podporovan\u00e1.'));
      return;
    }
    this._spi = new spiClass(this._options);
    this._spi.engineDeploy(callback);
  };
  ditec.AbstractJsCore.prototype._initDLauncher = function() {
    var self = this;
    ditec.dLauncher.startLauncher({onSuccess:function(url) {
      self._options["dlauncher.url"] = url;
      setCookie("ditecDLaucherUrl", url), self._deployState.dLauncherStarted = true;
      self._deployControler();
    }, onError:function(e) {
      self._options["dlauncher.url"] = null;
      self._deployControler();
    }});
  };
  ditec.AbstractJsCore.prototype._deployControler = function() {
    var self = this;
    var platforms = self._deployState.platforms;
    if (self._deployState && self._deployState.cancelFlag) {
      if (self._spi) {
        self._spi.engineUnDeploy();
        self._spi = null;
        self._platform = null;
      }
      var callback = self._deployState.callback;
      self._deployState.callback = null;
      callback.onError(ditec.AbstractJsCore._createError(new Error, 1, "Zrusene"));
      return;
    }
    if (platforms.length == 0) {
      var callback = self._deployState.callback;
      self._deployState.callback = null;
      var code;
      if (self._deployState.notInstalled) {
        code = ditec.utils.ERROR_NOT_INSTALLED;
      } else {
        code = ditec.utils.ERROR_GENERAL;
      }
      callback.onError(ditec.AbstractJsCore._createError(new Error, code, "Nepodarilo sa nasadi\u0165 \u017eiadnu podporovan\u00fa verziu aplik\u00e1cie " + self._appName + "."));
      return;
    }
    var p = platforms[0];
    if (isDLauncherPlatform(p)) {
      if (!self._options["dlauncher.url"]) {
        self._initDLauncher();
        return;
      }
    }
    self._deployPlatform(p, {onSuccess:function() {
      if (self._deployState && self._deployState.cancelFlag) {
        self._deployControler();
      } else {
        if (self._deployState && self._deployState.callback) {
          var callback = self._deployState.callback;
          self._deployState.callback = null;
          self._ready = true;
          self.log("Nasadenie \u00faspe\u0161n\u00e9. Pou\u017e\u00edvana platforma: " + p);
          callback.onSuccess();
          return;
        }
      }
    }, onError:function(e) {
      self.log("Chyba pri nasadzovani pre platformu: " + p, e);
      if (self._spi) {
        self._spi.engineUnDeploy();
        self._spi = null;
        self._platform = null;
      }
      if (ditec.utils.isDitecError(e) && e.code !== ditec.utils.ERROR_NOT_INSTALLED) {
        self._deployState.notInstalled = false;
      }
      if (isDLauncherPlatform(p) && !self._deployState.dLauncherStarted && ditec.utils.isDitecError(e) && e.code == ditec.utils.ERROR_GENERAL) {
        self._options["dlauncher.url"] = null;
      } else {
        self._deployState.platforms = platforms.slice(1);
      }
      self._deployControler();
      return;
    }});
  };
  ditec.AbstractJsCore.prototype.deploy = function(options, callback) {
    this._wrapFunction(callback, function(wCallback) {
      var self = this;
      options = ditec.utils.mergeObjects(options, self._config);
      this._ready = false;
      if (options["object.style"] == null) {
        options["object.style"] = "width:1px;height:1px";
      }
      if (options["lang"] == null) {
        options["lang"] = "sk";
      }
      self._options = options;
      self.log("Zaciatok nasadenia.", options);
      if (this._spi) {
        this._spi.engineUnDeploy();
        this._spi = null;
        this._platform = null;
      }
      self.detectSupportedPlatforms(options["platforms"], new ditec.utils.ChainedCallback(wCallback, function(platforms) {
        self._options["platforms"] = platforms;
        self._deployState = {platforms:platforms, callback:wCallback, cancelFlag:false, dLauncherStarted:false, notInstalled:true};
        self._options["dlauncher.url"] = getCookie("ditecDLaucherUrl"), self._deployControler();
      }));
    }, true);
  };
  ditec.AbstractJsCore.prototype.deployCancel = function(callback) {
    var self = this;
    this._wrapFunction(callback, function(wCallback) {
      if (self._deployState) {
        self._deployState.cancelFlag = true;
        if (self._spi) {
          self._spi.engineUnDeploy();
          self._spi = null;
          self._platform = null;
        }
      }
      ditec.dLauncher.startLauncherCancel();
      wCallback.onSuccess();
    }, true);
  };
})();
// Input 7
var ditec = ditec || {};
(function() {
  var mapException = function(e, isLaunch) {
    if (ditec.dbridge2.isAppException(e)) {
      return ditec.utils.createDitecError(new Error, e.code != null ? e.code.asNumber() : null, e.message, e.toString() + " " + e.remoteStackTrace);
    } else {
      if (ditec.dbridge2.isDBridgeException(e)) {
        var code;
        if (isLaunch) {
          switch(e.code) {
            case ditec.dbridge2.DL_CANCELLED:
              code = ditec.utils.ERROR_LAUNCH_FORBIDDEN;
              break;
            case ditec.dbridge2.DL_APP_NOT_AVAIABLE:
            ;
            case ditec.dbridge2.DL_JAVA_NOT_FOUND:
              code = ditec.utils.ERROR_NOT_INSTALLED;
              break;
            default:
              code = ditec.utils.ERROR_LAUNCH_FAILED;
              break;
          }
        } else {
          code = ditec.utils.ERROR_GENERAL;
        }
        return ditec.utils.createDitecError(new Error, code, e.message, e.toString() + " " + e.remoteStackTrac);
      }
    }
    if (ditec.dbridge2.isGenericException(e)) {
      return ditec.utils.createDitecError(new Error, 0, e.message, e.toString() + " " + e.remoteStackTrace);
    } else {
      return e;
    }
  };
  ditec.AbstractLauncher2Wrapper = function(engineName, options) {
    this._engineName = engineName;
    this._options = options;
    this._core = null;
  };
  ditec.AbstractLauncher2Wrapper.prototype._asLong = function(value) {
    if (typeof value == "number") {
      if (value % 1 !== 0 || value < -9223372036854775808 || value > 0x7fffffffffffffff) {
        throw new Error("Invalid value for Long: '" + value + "'");
      } else {
        value = value.toString();
      }
    }
    return new ditec.dbridge2.Long(value);
  }, ditec.AbstractLauncher2Wrapper.prototype._invokeMethod = function(appId, methodName, args, returnType, callback) {
    this._core.invoke(appId, methodName, args).then(function(ret) {
      if (returnType == "int") {
        ret = ret.asNumber();
      }
      callback.onSuccess(ret);
    }).catch(function(e) {
      callback.onError(mapException(e, false));
    });
  };
  ditec.AbstractLauncher2Wrapper.prototype.engineDeploy = function(callback) {
    try {
      var self = this;
      var dLauncher2UrlList = this._options["dlauncher2.urlList"];
      ditec.dbridge2.launch(dLauncher2UrlList, null).then(function(x) {
        self._core = x;
        callback.onSuccess();
      }).catch(function(e) {
        callback.onError(mapException(e, true));
      });
    } catch (e) {
      callback.onError(e);
    }
  };
  ditec.AbstractLauncher2Wrapper.prototype.engineUnDeploy = function() {
    if (this._core) {
      this._core.close();
      this._core = null;
    }
  };
})();
// Input 8
var ditec = ditec || {};
(function() {
  ditec.AbstractLauncherWrapper = function(engineName, options, localUri) {
    this._engineName = engineName;
    this._options = options;
    this._core = null;
    this._msgId = 0;
    this._callbacks = {};
    this._localUri = localUri;
  };
  ditec.AbstractLauncherWrapper.prototype._generateMsgId = function() {
    return this._msgId++;
  };
  ditec.AbstractLauncherWrapper.prototype._invokeMethod = function(methodName, args, returnType, callback) {
    var id = this._generateMsgId();
    var json = {"jsonrpc":"2.0", "id":id, "method":methodName, "params":args};
    this._core.send(JSON.stringify(json));
    this._callbacks[id] = {onSuccess:function(ret) {
      if (returnType == null) {
        callback.onSuccess(ret);
      } else {
        if (returnType === "Date") {
          try {
            if (ret == null) {
              callback.onSuccess(ret);
            } else {
              callback.onSuccess(new Date(ret));
            }
          } catch (e) {
            callback.onError(utils.ditec.createDitecError(new Error, null, "Neplatny datum: ", ret));
          }
        } else {
          callback.onError(utils.ditec.createDitecError(new Error, null, "Neznamy navratovy typ: ", returnType));
        }
      }
    }, onError:function(e) {
      callback.onError(e);
    }};
  };
  ditec.AbstractLauncherWrapper.prototype.engineDeploy = function(callback) {
    try {
      var self = this;
      var applicationUri;
      if (this._localUri) {
        applicationUri = this._localUri;
      } else {
        applicationUri = this._options["dlauncher.jnlpUrl"];
      }
      var dLauncherUrl = this._options["dlauncher.url"];
      ditec.dLauncher.launchApplication(dLauncherUrl, applicationUri, this._options["dlauncher.javaXmx"], this._options["dlauncher.javaXms"], this._options["dlauncher.javaXss"], new ditec.utils.ChainedCallback(callback, function(ret) {
        self._core = new WebSocket(ret.url);
        self._core.onopen = function(evt) {
          callback.onSuccess();
        };
        self._core.onclose = function(evt) {
          for (var key in self._callbacks) {
            self._callbacks[key].onError(ditec.utils.createDitecError(new Error, null, "Spojenie prerusene"));
          }
          self._callbacks = {};
        };
        self._core.onmessage = function(evt) {
          try {
            var msg = JSON.parse(evt.data);
            if (msg.id == null) {
              return;
            }
            var callback = self._callbacks[msg.id];
            delete self._callbacks[msg.id];
            if (callback) {
              if ("result" in msg) {
                callback.onSuccess(msg.result);
              } else {
                var e = msg.error;
                if (!e) {
                  e = {};
                }
                callback.onError(ditec.utils.createDitecError(new Error, e.code, e.message, e.data));
              }
            }
          } catch (e) {
            throw e;
          }
        };
        self._core.onerror = function(evt) {
          self._core.close();
        };
      }));
    } catch (e) {
      callback.onError(e);
    }
  };
  ditec.AbstractLauncherWrapper.prototype.engineUnDeploy = function() {
    if (this._core) {
      this._core.close();
      this._core = null;
    }
  };
})();
// Input 9
var ditec = ditec || {};
(function() {
  var EXTENSION_CHECK_TIMEOUT = 5E3;
  var Integer = function(value) {
    if (value === null || value === undefined || typeof value === "string" && value.trim() === "") {
      this._value = null;
    } else {
      this._value = Number(value);
      if (this._value % 1 !== 0 || this._value < -2147483648 || this._value > 2147483647) {
        throw new Error("Invalid value for Integer: '" + value + "'");
      }
    }
  };
  Integer.prototype.asNumber = function() {
    return this._value;
  };
  Integer.prototype.valueOf = function() {
    return this._value;
  };
  Integer.prototype.toString = function() {
    return this._value === null ? null : this._value.toString();
  };
  var longRegExp = new RegExp("^-?\\d+$");
  var Long = function(value) {
    if (value === null || value === undefined || typeof value === "string" && value.trim() === "") {
      this._value = null;
    } else {
      if (typeof value === "string" && longRegExp.test(value)) {
        this._value = value;
      } else {
        throw new Error("Invalid value for Long: '" + value + "'");
      }
    }
  };
  Long.prototype.asString = function() {
    return this._value;
  };
  Long.prototype.asBigInt = function() {
    return this._value === null ? null : BigInt(this._value);
  };
  Long.prototype.valueOf = function() {
    return this._value === null ? null : BigInt(this._value);
  };
  Long.prototype.toString = function() {
    return this._value;
  };
  var Char = function(value) {
    if (value === null || value === undefined || typeof value === "string" && value.trim() === "") {
      this._value = null;
    } else {
      if (typeof value === "string" && value.length === 1) {
        this._value = value;
      } else {
        throw new Error("Invalid value for Char: '" + value + "'");
      }
    }
  };
  Char.prototype.asString = function() {
    return this._value;
  };
  Char.prototype.valueOf = function() {
    return this._value;
  };
  Char.prototype.toString = function() {
    return this._value;
  };
  var ByteArray = function(value) {
    if (value === null || value === undefined) {
      this._value = null;
    } else {
      if (typeof value === "string") {
        if (value.length % 4 !== 0) {
          throw new Error("Invalid length of BASE64 ByteArray: " + value.length);
        }
        for (var i = 0;i < value.length;i++) {
          var ch = value.charCodeAt(i);
          if (!(ch >= 64 && ch <= 90 || ch >= 97 && ch <= 122 || ch >= 47 && ch <= 57 || ch == 43 || ch == 61)) {
            throw new Error("Invalid char in BASE64 ByteArray: #" + ch);
          }
        }
        this._value = value;
      } else {
        if (typeof value === "ArrayBuffer") {
          throw new Error("ArrayBuffer zatial nie je podporovany");
        } else {
          throw new Error("Invalid value for ByteArray: " + value);
        }
      }
    }
  };
  ByteArray.prototype.asBase64 = function() {
    return this._value;
  };
  ByteArray.prototype.asArrayBuffer = function() {
    throw new Error("ArrayBuffer zatial nie je podporovany");
  };
  ByteArray.prototype.valueOf = function() {
    return this._value;
  };
  ByteArray.prototype.toString = function() {
    return this._value;
  };
  var Origin = function() {
    this._value = null;
  };
  Origin.prototype.valueOf = function() {
    return this._value;
  };
  Origin.prototype.toString = function() {
    return this._value;
  };
  var isHighSurrogate = function(charCode) {
    return charCode >= 55296 && charCode < 56319 + 1;
  };
  var PromiseWrapper = function() {
    var self = this;
    self.promise = new Promise(function(resolve, reject) {
      self.resolve = resolve;
      self.reject = reject;
    });
  };
  PromiseWrapper.prototype.then = function(resolve, reject) {
    return this.promise.then(resolve, reject);
  };
  var createAppException = function(error, code, msg, remoteStackTrace, data) {
    if (!error) {
      error = new Error;
    }
    error.name = "sk.ditec.dbridge2.AppException";
    error.type = "sk.ditec.dbridge2.AppException";
    error.message = msg;
    error.code = code;
    error.remoteStackTrace = remoteStackTrace;
    error.data = data === undefined ? null : data;
    error.toString = function() {
      return error.name + ": (" + error.code + ")" + (error.message === undefined ? "" : " " + error.message);
    };
    return error;
  };
  var createDBridgeException = function(error, code, msg, remoteStackTrace, data) {
    if (!error) {
      error = new Error;
    }
    error.name = "sk.ditec.dbridge2.DBridgeException";
    error.type = "sk.ditec.dbridge2.DBridgeException";
    error.message = msg;
    error.code = code;
    error.remoteStackTrace = remoteStackTrace;
    error.data = data === undefined ? null : data;
    error.toString = function() {
      return error.name + ": (" + error.code + ")" + (error.message === undefined ? "" : " " + error.message);
    };
    return error;
  };
  var createGenericException = function(error, type, msg, remoteStackTrace) {
    if (!error) {
      error = new Error;
    }
    error.name = "sk.ditec.dbridge2.GenericException";
    error.type = type;
    error.message = msg;
    error.remoteStackTrace = remoteStackTrace;
    error.toString = function() {
      return error.name + ": (" + error.type + ")" + (error.message === undefined ? "" : " " + error.message);
    };
    return error;
  };
  var DataTypeSimple = {"NIL":0, "BOOLEAN":1, "INTEGER":2, "LONG":3, "DOUBLE":5, "CHAR16":7, "STRING_UTF16":9, "ARRAY_BYTE":10};
  var DataTypeComplex = {"EXCEPTION":-1, "LIST":-2, "MAP":-3, "DATE_TIME":-5, "ORIGIN":-6, "INVOKE_METHOD_REQ":-128, "INVOKE_METHOD_RESP":-127};
  var connectionIdSeq = 0;
  var WebExtensionsIo = function(messageCallback, errorCallback, closeCallback) {
    this.version = null;
    this._connectionId = connectionIdSeq++;
    this._openPromiseWrapper = new PromiseWrapper;
    this._initPromiseWrapper = new PromiseWrapper;
    this._messageCallback = messageCallback;
    this._errorCallback = errorCallback;
    this._closeCallback = closeCallback;
    window.addEventListener("message", this._onReceiveMessage.bind(this), false);
  };
  WebExtensionsIo.prototype.init = function() {
    setTimeout(function() {
      this._initPromiseWrapper.reject(createDBridgeException(new Error, ditec.dbridge2.DB_EXTENSION_NOT_FOUND, "D.Launcher 2 web extension not found"));
    }.bind(this), EXTENSION_CHECK_TIMEOUT);
    window.postMessage({"$ditec.dbridge2.Msg":"initReq", "conn":this._connectionId}, "*");
    return this._initPromiseWrapper.promise;
  };
  WebExtensionsIo.prototype.open = function() {
    window.postMessage({"$ditec.dbridge2.Msg":"openReq", "conn":this._connectionId}, "*");
    return this._openPromiseWrapper.promise;
  };
  WebExtensionsIo.prototype.send = function(msg) {
    msg["$ditec.dbridge2.Msg"] = "req";
    msg["conn"] = this._connectionId;
    window.postMessage(msg, "*");
  };
  WebExtensionsIo.prototype.close = function() {
    window.postMessage({"$ditec.dbridge2.Msg":"closeReq", "conn":this._connectionId}, "*");
  };
  WebExtensionsIo.prototype._onReceiveMessage = function(event) {
    var data = event.data;
    if (data == null || typeof data !== "object") {
      return;
    }
    var msg = data["$ditec.dbridge2.Msg"];
    if (!msg) {
      return;
    }
    if (data["conn"] !== this._connectionId) {
      return;
    }
    if ("resp" === msg) {
      this._messageCallback(data);
    } else {
      if ("initResp" === msg) {
        this.version = data["version"];
        this._initPromiseWrapper.resolve();
      } else {
        if ("openResp" === msg) {
          this._openPromiseWrapper.resolve();
        } else {
          if ("closeResp" === msg) {
            var ex = null;
            var error = data["error"];
            if (error) {
              var code;
              if (error.startsWith("No such native application")) {
                code = ditec.dbridge2.DB_DLAUNCHER2_NOT_FOUND;
              } else {
                if (error.startsWith("Specified native messaging host not found")) {
                  code = ditec.dbridge2.DB_DLAUNCHER2_NOT_FOUND;
                } else {
                  code = ditec.dbridge2.DB_CONNECTION_CLOSED;
                }
              }
              ex = createDBridgeException(null, code, error);
            }
            this._openPromiseWrapper.reject(ex);
            this._closeCallback(ex);
          } else {
            if ("error" === msg) {
              this._errorCallback(data["error"]);
            }
          }
        }
      }
    }
  };
  var DnmcIo = function(messageCallback, errorCallback, closeCallback) {
    this.version = undefined;
    this._dnmc = undefined;
    this._initPromiseWrapper = new PromiseWrapper;
    this._openPromiseWrapper = new PromiseWrapper;
    this._messageCallback = messageCallback;
    this._errorCallback = errorCallback;
    this._closeCallback = closeCallback;
  };
  DnmcIo.prototype.init = function() {
    try {
      this._dnmc = new ActiveXObject("DTC.DitecNMc");
    } catch (e) {
      this._initPromiseWrapper.reject(createDBridgeException(e, ditec.dbridge2.DB_EXTENSION_NOT_FOUND, "Native Messaging communication plugin not found"));
      return this._initPromiseWrapper.promise;
    }
    var self = this;
    this._dnmc.attachEvent("onmessage", function(msg) {
      window.setTimeout(function() {
        self._messageCallback(JSON.parse(msg));
      }, 0);
    });
    this._dnmc.attachEvent("onconnect", function() {
      if (self._dnmc.valid) {
        self._openPromiseWrapper.resolve();
      } else {
        self._openPromiseWrapper.reject(new Error("Invalid state"));
      }
    });
    this._dnmc.attachEvent("ondisconnect", function() {
      self._closeCallback(null);
    });
    this._initPromiseWrapper.resolve();
    return this._initPromiseWrapper;
  };
  DnmcIo.prototype.open = function() {
    this._dnmc.connectNative("sk.ditec.dbridge2.nm");
    if (this._dnmc.errorCode == -2) {
      this._openPromiseWrapper.reject(createDBridgeException(new Error, ditec.dbridge2.DB_DLAUNCHER2_NOT_FOUND, "D.Launcher not installed"));
    } else {
      if (this._dnmc.errorCode == -3) {
        this._openPromiseWrapper.reject(createDBridgeException(new Error, ditec.dbridge2.DB_IE_PROTECTED_MODE_ENABLED, "IE protected mode is not disabled"));
      } else {
        if (this._dnmc.errorCode != 0) {
          this._openPromiseWrapper.reject(createDBridgeException(new Error, ditec.dbridge2.DB_GENERAL, "D.Dnmc error: " + this._dnmc.errorCode));
        }
      }
    }
    return this._openPromiseWrapper.promise;
  };
  DnmcIo.prototype.send = function(msg) {
    this._dnmc.postMessage(JSON.stringify(msg));
  };
  DnmcIo.prototype.close = function() {
    this._dnmc.disconnectNative();
  };
  var UnsupportedIo = function(messageCallback, errorCallback, closeCallback) {
  };
  UnsupportedIo.prototype.init = function() {
    var initPromiseWrapper = new PromiseWrapper;
    initPromiseWrapper.reject(createDBridgeException(new Error, ditec.dbridge2.DB_PLATFORM_NOT_SUPPORTED, "Your browser is not supported"));
    return initPromiseWrapper.promise;
  };
  UnsupportedIo.prototype.open = function() {
    var openPromiseWrapper = new PromiseWrapper;
    openPromiseWrapper.reject(createDBridgeException(new Error, ditec.dbridge2.DB_PLATFORM_NOT_SUPPORTED, "Your browser is not supported"));
    return openPromiseWrapper.promise;
  };
  UnsupportedIo.prototype.send = function(msg) {
  };
  UnsupportedIo.prototype.close = function() {
  };
  var ParserRoot = function(onInvokeMethodResp) {
    this._onInvokeMethodResp = onInvokeMethodResp;
  };
  ParserRoot.prototype.dataRecieved = function(data) {
    if (data instanceof InvokeMethodResp) {
      this._onInvokeMethodResp(data);
    } else {
      console.log(data);
    }
  };
  ParserRoot.prototype.getValue = function() {
    return undefined;
  };
  var ParserException = function() {
    var _value = undefined;
  };
  ParserException.prototype.dataRecieved = function(data) {
    if (data[0] === "sk.ditec.dbridge2.AppException") {
      this._value = createAppException(null, data[3], data[1], data[2], data[4]);
    } else {
      if (data[0] === "sk.ditec.dbridge2.DBridgeException") {
        this._value = createDBridgeException(null, data[3], data[1], data[2], data[4]);
      } else {
        this._value = createGenericException(null, data[0], data[1], data[2]);
      }
    }
  };
  ParserException.prototype.getValue = function() {
    return this._value;
  };
  var ParserList = function() {
    this._length = undefined;
    this._data = [];
  };
  ParserList.prototype.dataRecieved = function(data) {
    if (this._length === undefined) {
      if (data._value < 0 || data._value > 2147483647) {
        throw new Error("Invalid list length: " + data);
      }
      this._length = data._value;
    } else {
      if (this._data.length < this._length) {
        this._data.push(data);
      } else {
        throw new Error("List is full");
      }
    }
  };
  ParserList.prototype.getValue = function() {
    if (this._data.length === this._length) {
      return this._data;
    } else {
      return undefined;
    }
  };
  var ParserMap = function() {
    this._remaining = undefined;
    this._key = undefined;
    this._data = new Map;
  };
  ParserMap.prototype.dataRecieved = function(data) {
    if (this._remaining === undefined) {
      this._remaining = data._value * 2;
    } else {
      if (this._remaining > 0) {
        if (this._remaining-- % 2 == 0) {
          this._key = data;
        } else {
          this._data.set(this._key, data);
        }
      } else {
        throw new Error("Map is full");
      }
    }
  };
  ParserMap.prototype.getValue = function() {
    if (this._remaining === 0) {
      return this._data;
    } else {
      return undefined;
    }
  };
  var ParserDateTime = function() {
    var _value = undefined;
  };
  ParserDateTime.prototype.dataRecieved = function(data) {
    this._value = new Date(data);
  };
  ParserDateTime.prototype.getValue = function() {
    return this._value;
  };
  var ParserOrigin = function() {
    var _value = undefined;
  };
  ParserOrigin.prototype.dataRecieved = function(data) {
    this._value = data;
  };
  ParserOrigin.prototype.getValue = function() {
    return this._value;
  };
  var InvokeMethodResp = function() {
  };
  var ParserInvokeMethodResp = function() {
    var _value = undefined;
  };
  ParserInvokeMethodResp.prototype.dataRecieved = function(data) {
    this._value = new InvokeMethodResp;
    this._value.seq = data[0];
    this._value.exception = data[1];
    this._value.value = data[2];
  };
  ParserInvokeMethodResp.prototype.getValue = function() {
    return this._value;
  };
  var getBrowserType = function() {
    var ua = navigator.userAgent, tem, M = ua.match(/(opera|chrome|safari|firefox|msie|trident(?=\/))\/?\s*(\d+)/i) || [];
    if (/trident/i.test(M[1])) {
      tem = /\brv[ :]+(\d+)/g.exec(ua) || [];
      return {name:"msie", version:tem[1] || ""};
    }
    if (M[1] === "Chrome") {
      tem = ua.match(/\bOPR\/(\d+)/);
      if (tem != null) {
        return {name:"opera", version:tem[1]};
      }
      tem = ua.match(/\bEdge\/(\d+)/);
      if (tem != null) {
        return {name:"edge", version:tem[1]};
      }
    }
    M = M[2] ? [M[1], M[2]] : [navigator.appName, navigator.appVersion, "-?"];
    if ((tem = ua.match(/version\/(\d+)/i)) != null) {
      M.splice(1, 1, tem[1]);
    }
    return {name:M[0].toLowerCase(), version:M[1]};
  };
  var DBridgeClient = function() {
    var browserType = getBrowserType();
    if (browserType.name == "msie") {
      if (browserType.version == "11") {
        this._io = new DnmcIo(this._onMessage.bind(this), this._onError.bind(this), this._onClose.bind(this));
      } else {
        this._io = new UnsupportedIo(this._onMessage.bind(this), this._onError.bind(this), this._onClose.bind(this));
      }
    } else {
      this._io = new WebExtensionsIo(this._onMessage.bind(this), this._onError.bind(this), this._onClose.bind(this));
    }
    this._token = null;
    this._disconnected = new PromiseWrapper;
    this._closed = false;
    var self = this;
    this._disconnected.then(function() {
      self._closed = true;
      self._log("Disconnected");
    }).catch(function(e) {
      self._closed = true;
      self._log("Disconnected", e);
    });
    this._jSeq = 0;
    this._expectedJSeq = 0;
    this._reorderBuffer = {};
    this._sequence = 0;
    this._callMap = {};
    this._parserStack = [new ParserRoot(this._onInvokeMethodResp.bind(this))];
    this._partialDataBuffer = null;
  };
  DBridgeClient.prototype._log = function(msg, o) {
    return ditec.dbridge2.log(msg, o);
  };
  DBridgeClient.prototype.getVersion = function() {
    var self = this;
    return self._io.init().then(function() {
      return self._io.version;
    });
  };
  DBridgeClient.prototype._launch = function(uriList, reconnectToken) {
    var self = this;
    var ret = self._io.init().then(function() {
      return self._io.open();
    }).then(function() {
      var p = new PromiseWrapper;
      self._callMap["launch"] = p;
      self._sendMessage({"op":"launch", "args":{"uriList":uriList, "reconnectToken":reconnectToken}, "protocolMin":1, "protocolMax":1});
      return p;
    }).then(function() {
      return self;
    });
    ret.catch(function(e) {
      self._io.close();
    });
    return ret;
  };
  DBridgeClient.prototype._launchDetached = function(uriList) {
    var self = this;
    var ret = self._io.init().then(function() {
      return self._io.open();
    }).then(function() {
      var p = new PromiseWrapper;
      self._callMap["launchDetached"] = p;
      self._sendMessage({"op":"launchDetached", "args":{"uriList":uriList}});
      return p;
    }).then(function() {
      return self;
    });
    ret.catch(function(e) {
      self._io.close();
    });
    return ret;
  };
  DBridgeClient.prototype._sendMessage = function(msg) {
    msg["jSeq"] = this._jSeq++;
    if (this._closed) {
      throw createDBridgeException(new Error, ditec.dbridge2.DB_CONNECTION_CLOSED, "Connection closed");
    }
    this._io.send(msg);
  };
  DBridgeClient.prototype._onMessage = function(msg) {
    var jSeq = msg["jSeq"];
    if (jSeq == this._expectedJSeq) {
      this._expectedJSeq++;
      this._onMessageOrdered(msg);
      for (;;) {
        var nextMsg = this._reorderBuffer[this._expectedJSeq];
        if (nextMsg === undefined) {
          break;
        } else {
          this._expectedJSeq++;
          this._onMessageOrdered(nextMsg);
        }
      }
    } else {
      if (jSeq > this._expectedJSeq) {
        this._reorderBuffer[jSeq] = msg;
      } else {
        if (jSeq === undefined || jSeq === null) {
          this._onMessageOrdered(msg);
        } else {
          this._close(createDBridgeException(new Error, null, "Unexpected jSeq number"));
        }
      }
    }
  };
  DBridgeClient.prototype._onMessageOrdered = function(msg) {
    var self = this;
    if (typeof msg.op === "number") {
      self._onDataMsg(msg);
    } else {
      if (msg.op == "launch") {
        var p = self._callMap["launch"];
        if (p) {
          delete self._callMap["launch"];
          if (msg["code"] == ditec.dbridge2.DB_SUCCESS) {
            p.resolve(null);
          } else {
            var e = createDBridgeException(null, msg["code"], msg["msg"]);
            p.reject(e);
          }
        }
      } else {
        if (msg.op == "launchDetached") {
          var p = self._callMap["launchDetached"];
          if (p) {
            delete self._callMap["launchDetached"];
            if (msg["code"] == ditec.dbridge2.DB_SUCCESS) {
              p.resolve(null);
            } else {
              var e = createDBridgeException(null, msg["code"], msg["msg"]);
              p.reject(e);
            }
          }
        } else {
          if (msg.op == "log") {
            self._log(msg["msg"]);
          } else {
            console.error("Unknown op: " + msg.op);
          }
        }
      }
    }
  };
  DBridgeClient.prototype._onError = function(errorMsg) {
    console.error(errorMsg);
  };
  DBridgeClient.prototype._onClose = function(ex) {
    var p = this._callMap["launch"];
    if (p) {
      delete this._callMap["launch"];
      if (ex == null) {
        p.resolve(null);
      } else {
        p.reject(ex);
      }
    }
    this._close(ex);
  };
  DBridgeClient.prototype._onInvokeMethodResp = function(msg) {
    var p = this._callMap[msg.seq];
    if (p !== undefined) {
      delete this._callMap[msg.seq];
      if (msg.exception === undefined || msg.exception === null) {
        p.resolve(msg.value);
      } else {
        p.reject(msg.exception);
      }
    }
  };
  DBridgeClient.prototype._onDataMsg = function(msg) {
    var op = msg.op;
    if (op === DataTypeSimple.STRING_UTF16) {
      var s = this._decodeStringUtF16Chunk(msg);
      if (s !== undefined) {
        var last = this._parserStack[this._parserStack.length - 1];
        last.dataRecieved(s);
      }
    } else {
      if (op === DataTypeSimple.ARRAY_BYTE) {
        var s = this._decodeByteArrayBase64Chunk(msg);
        if (s !== undefined) {
          var last = this._parserStack[this._parserStack.length - 1];
          last.dataRecieved(s);
        }
      } else {
        if (op >= 0) {
          if (this._partialDataBuffer !== null) {
            throw new Error("Unterminated message");
          }
          var last = this._parserStack[this._parserStack.length - 1];
          last.dataRecieved(this._decodeSimpleType(msg));
        } else {
          if (this._partialDataBuffer !== null) {
            throw new Error("Unterminated message");
          }
          if (DataTypeComplex.EXCEPTION === op) {
            this._parserStack.push(new ParserException);
          } else {
            if (DataTypeComplex.LIST === op) {
              this._parserStack.push(new ParserList);
            } else {
              if (DataTypeComplex.MAP === op) {
                this._parserStack.push(new ParserMap);
              } else {
                if (DataTypeComplex.DATE_TIME === op) {
                  this._parserStack.push(new ParserDateTime);
                } else {
                  if (DataTypeComplex.ORIGIN === op) {
                    this._parserStack.push(new ParserOrigin);
                  } else {
                    if (DataTypeComplex.INVOKE_METHOD_RESP === op) {
                      this._parserStack.push(new ParserInvokeMethodResp);
                    } else {
                      throw new Error("Unknown op value: " + op);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    var lastParser = this._parserStack[this._parserStack.length - 1];
    for (;;) {
      var val = lastParser.getValue();
      if (val !== undefined) {
        this._parserStack.pop();
        lastParser = this._parserStack[this._parserStack.length - 1];
        lastParser.dataRecieved(val);
      } else {
        break;
      }
    }
  };
  DBridgeClient.prototype._decodeSimpleType = function(msg) {
    var op = msg.op;
    if (DataTypeSimple.NIL === op) {
      return null;
    } else {
      if (DataTypeSimple.BOOLEAN === op) {
        return msg.value;
      } else {
        if (DataTypeSimple.INTEGER === op) {
          return new ditec.dbridge2.Integer(msg.value);
        } else {
          if (DataTypeSimple.LONG === op) {
            return new ditec.dbridge2.Long(msg.value);
          } else {
            if (DataTypeSimple.DOUBLE === op) {
              return msg.value;
            } else {
              if (DataTypeSimple.CHAR16 === op) {
                return new ditec.dbridge2.Char(msg.value);
              } else {
                throw new Error("Unknown op value: " + op);
              }
            }
          }
        }
      }
    }
  };
  DBridgeClient.prototype._decodeStringUtF16Chunk = function(msg) {
    if (this._partialDataBuffer === null) {
      this._partialDataBuffer = "";
    }
    this._partialDataBuffer += msg.value;
    if (msg.end === true) {
      var ret = this._partialDataBuffer;
      this._partialDataBuffer = null;
      return ret;
    } else {
      return undefined;
    }
  };
  DBridgeClient.prototype._decodeByteArrayBase64Chunk = function(msg) {
    if (this._partialDataBuffer === null) {
      this._partialDataBuffer = "";
    }
    this._partialDataBuffer += msg.value;
    if (msg.end === true) {
      var ret = new ByteArray(this._partialDataBuffer);
      this._partialDataBuffer = null;
      return ret;
    } else {
      return undefined;
    }
  };
  DBridgeClient.prototype._serialize = function(data) {
    if (data === null || data === undefined) {
      this._sendMessage({"op":DataTypeSimple.NIL});
    } else {
      if (typeof data === "boolean") {
        this._sendMessage({"op":DataTypeSimple.BOOLEAN, "value":data});
      } else {
        if (data instanceof ditec.dbridge2.Integer) {
          this._sendMessage({"op":DataTypeSimple.INTEGER, "value":data._value});
        } else {
          if (data instanceof ditec.dbridge2.Long) {
            this._sendMessage({"op":DataTypeSimple.LONG, "value":data._value});
          } else {
            if (typeof data === "number") {
              this._sendMessage({"op":DataTypeSimple.DOUBLE, "value":data});
            } else {
              if (data instanceof ditec.dbridge2.Char) {
                this._sendMessage({"op":DataTypeSimple.CHAR16, "value":data._value});
              } else {
                if (typeof data === "string") {
                  this._serializeStringUtf16(data);
                } else {
                  if (data instanceof ditec.dbridge2.ByteArray) {
                    this._serializeByteArray(data);
                  } else {
                    if (data instanceof Error) {
                      this._serializeException(data);
                    } else {
                      if (Array.isArray(data)) {
                        this._sendMessage({"op":DataTypeComplex.LIST});
                        this._serialize(new ditec.dbridge2.Integer(data.length));
                        data.forEach(function(item) {
                          this._serialize(item);
                        }, this);
                      } else {
                        if (data instanceof Map) {
                          this._sendMessage({"op":DataTypeComplex.MAP});
                          this._serialize(new ditec.dbridge2.Integer(data.size));
                          data.forEach(function(value, key) {
                            this._serialize(key);
                            this._serialize(value);
                          }, this);
                        } else {
                          if (data instanceof Date) {
                            this._serializeDateTime(data);
                          } else {
                            if (data instanceof ditec.dbridge2.Origin) {
                              this._serializeOrigin(data);
                            } else {
                              if (data instanceof InvokeMethodReq) {
                                this._sendMessage({"op":DataTypeComplex.INVOKE_METHOD_REQ});
                                this._serialize([new ditec.dbridge2.Integer(data.seq), data.appId, data.methodName, data.args]);
                              } else {
                                throw new Error("Unserializable type: " + typeof data + " " + data);
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  };
  var STRING_CHUNK_MAX_LEN = 45E4;
  DBridgeClient.prototype._serializeStringUtf16 = function(s) {
    for (var i = 0;i < s.length || i == 0;) {
      var m = {"op":DataTypeSimple.STRING_UTF16};
      if (i == 0) {
        m.length = s.length;
      }
      var chunk = s.substring(i, i += STRING_CHUNK_MAX_LEN);
      var ch = chunk.charCodeAt(chunk.length - 1);
      if (isHighSurrogate(ch)) {
        chunk += s.charAt(i++);
      }
      m.value = chunk;
      this._sendMessage(m);
    }
  };
  var getArrayLength = function(base64) {
    var padding = (base64.match(/(=*)$/) || [])[1].length;
    return 3 * Math.ceil(base64.length / 4) - padding;
  };
  var BASE64_CHUNK_MAX_LEN = 1E6;
  DBridgeClient.prototype._serializeByteArray = function(s) {
    for (var i = 0;i < s._value.length || i == 0;) {
      var m = {"op":DataTypeSimple.ARRAY_BYTE};
      if (i == 0) {
        m.length = getArrayLength(s._value);
      }
      var chunk = s._value.substring(i, i += BASE64_CHUNK_MAX_LEN);
      m.value = chunk;
      this._sendMessage(m);
    }
  };
  DBridgeClient.prototype._serializeException = function(s) {
    this._sendMessage({"op":DataTypeComplex.EXCEPTION});
    var stackTrace = s.stack;
    var l;
    if (s.name === "sk.ditec.dbridge2.AppException") {
      l = ["sk.ditec.dbridge2.AppException", s.message, stackTrace, s.code, s.data];
    } else {
      if (s.name === "sk.ditec.dbridge2.DBridgeException") {
        l = ["sk.ditec.dbridge2.DBridgeException", s.message, stackTrace, String(s.code), s.data];
      } else {
        l = [s.type, s.message, stackTrace];
      }
    }
    this._serialize(l);
  };
  function pad(number) {
    if (number < 10) {
      return "0" + number;
    }
    return number;
  }
  DBridgeClient.prototype._serializeDateTime = function(s) {
    this._sendMessage({"op":DataTypeComplex.DATE_TIME});
    var str = s.getUTCFullYear() + "-" + pad(s.getUTCMonth() + 1) + "-" + pad(s.getUTCDate()) + "T" + pad(s.getUTCHours()) + ":" + pad(s.getUTCMinutes()) + ":" + pad(s.getUTCSeconds()) + "." + (s.getUTCMilliseconds() / 1E3).toFixed(3).slice(2, 5) + "Z";
    this._serialize(str);
  };
  DBridgeClient.prototype._serializeOrigin = function(s) {
    this._sendMessage({"op":DataTypeComplex.ORIGIN});
  };
  DBridgeClient.prototype._close = function(e) {
    if (e == null) {
      this._disconnected.resolve(null);
    } else {
      this._disconnected.reject(e);
    }
  };
  DBridgeClient.prototype.disconnected = function() {
    return this._disconnected;
  };
  DBridgeClient.prototype.close = function() {
    this._io.close();
  };
  DBridgeClient.prototype.getToken = function() {
  };
  var InvokeMethodReq = function(seq, appId, methodName, args) {
    this.seq = seq;
    this.appId = appId;
    this.methodName = methodName;
    this.args = args;
  };
  DBridgeClient.prototype.invoke = function(appId, methodName, args) {
    var p = new PromiseWrapper;
    var seq = 0;
    try {
      if (this._sequence == 2147483647) {
        this._sequence = 0;
      }
      seq = ++this._sequence;
      this._callMap[seq] = p;
      this._serialize(new InvokeMethodReq(seq, appId, methodName, args));
    } catch (e) {
      if (seq != 0) {
        delete this._callMap[seq];
      }
      this._onFatalError(e);
      p.reject(e);
    }
    return p.promise;
  };
  DBridgeClient.prototype._onFatalError = function(e) {
    this._log("Fatal error", e);
    this.close();
  };
  ditec.dbridge2 = {DB_SUCCESS:"DB0", DB_GENERAL:"DB200", DB_CONNECTION_CLOSED:"DB204", DB_PLATFORM_NOT_SUPPORTED:"DB205", DB_EXTENSION_NOT_FOUND:"DB206", DB_DLAUNCHER2_NOT_FOUND:"DB207", DB_IE_PROTECTED_MODE_ENABLED:"DB208", DB_UNKNOWN_APPLICATION:"DB209", DB_UNKNOWN_METHOD:"DB210", DB_UNSUPPORTED_PROTOCOL:"DB211", DL_SUCCESS:"DL0", DL_CANCELLED:"DL63", DL_GENERAL_ERROR:"DL62", DL_APP_CRASHED:"DL61", DL_APP_NOT_AVAIABLE:"DL60", DL_APP_ACTION_NOT_AVAIABLE:"DL59", DL_JAVA_NOT_FOUND:"DL58", Integer:Integer, 
  Long:Long, Char:Char, ByteArray:ByteArray, Origin:Origin, launch:function(uriList, reconnectToken) {
    var d = new DBridgeClient;
    return d._launch(uriList, reconnectToken);
  }, launchDetached:function(uriList) {
    var d = new DBridgeClient;
    return d._launchDetached(uriList);
  }, isAppException:function(e) {
    return e instanceof Error && e.name === "sk.ditec.dbridge2.AppException";
  }, isDBridgeException:function(e) {
    return e instanceof Error && e.name === "sk.ditec.dbridge2.DBridgeException";
  }, isGenericException:function(e) {
    return e instanceof Error && e.name === "sk.ditec.dbridge2.GenericException";
  }, log:function(msg, o) {
    try {
      var s = "D.Bridge 2: " + msg;
      if (o != null) {
        s += "\nStr:" + o;
        if ("remoteStackTrace" in o) {
          s += "\nRemote stack trace: " + o.remoteStackTrace;
        }
        var stack = o.stack;
        if (stack) {
          s += "\nStack: " + stack;
        }
        try {
          s += "\nJson: " + JSON.stringify(o);
        } catch (e) {
        }
      }
      if ("console" in window && "log" in window.console) {
        if (o != null) {
          console.log(s + "\n", o);
        } else {
          console.log(s);
        }
      }
      return s;
    } catch (e) {
      return msg;
    }
  }};
})();
// Input 10
!function(e, t) {
  "object" == typeof exports && "undefined" != typeof module ? t() : "function" == typeof define && define.amd ? define(t) : t();
}(0, function() {
  function e(e) {
    var t = this.constructor;
    return this.then(function(n) {
      return t.resolve(e()).then(function() {
        return n;
      });
    }, function(n) {
      return t.resolve(e()).then(function() {
        return t.reject(n);
      });
    });
  }
  function t(e) {
    return new this(function(t, n) {
      function o(e, n) {
        if (n && ("object" == typeof n || "function" == typeof n)) {
          var f = n.then;
          if ("function" == typeof f) {
            return void f.call(n, function(t) {
              o(e, t);
            }, function(n) {
              r[e] = {status:"rejected", reason:n}, 0 == --i && t(r);
            });
          }
        }
        r[e] = {status:"fulfilled", value:n}, 0 == --i && t(r);
      }
      if (!e || "undefined" == typeof e.length) {
        return n(new TypeError(typeof e + " " + e + " is not iterable(cannot read property Symbol(Symbol.iterator))"));
      }
      var r = Array.prototype.slice.call(e);
      if (0 === r.length) {
        return t([]);
      }
      for (var i = r.length, f = 0;r.length > f;f++) {
        o(f, r[f]);
      }
    });
  }
  function n(e) {
    return !(!e || "undefined" == typeof e.length);
  }
  function o() {
  }
  function r(e) {
    if (!(this instanceof r)) {
      throw new TypeError("Promises must be constructed via new");
    }
    if ("function" != typeof e) {
      throw new TypeError("not a function");
    }
    this._state = 0, this._handled = !1, this._value = undefined, this._deferreds = [], l(e, this);
  }
  function i(e, t) {
    for (;3 === e._state;) {
      e = e._value;
    }
    0 !== e._state ? (e._handled = !0, r._immediateFn(function() {
      var n = 1 === e._state ? t.onFulfilled : t.onRejected;
      if (null !== n) {
        var o;
        try {
          o = n(e._value);
        } catch (r) {
          return void u(t.promise, r);
        }
        f(t.promise, o);
      } else {
        (1 === e._state ? f : u)(t.promise, e._value);
      }
    })) : e._deferreds.push(t);
  }
  function f(e, t) {
    try {
      if (t === e) {
        throw new TypeError("A promise cannot be resolved with itself.");
      }
      if (t && ("object" == typeof t || "function" == typeof t)) {
        var n = t.then;
        if (t instanceof r) {
          return e._state = 3, e._value = t, void c(e);
        }
        if ("function" == typeof n) {
          return void l(function(e, t) {
            return function() {
              e.apply(t, arguments);
            };
          }(n, t), e);
        }
      }
      e._state = 1, e._value = t, c(e);
    } catch (o) {
      u(e, o);
    }
  }
  function u(e, t) {
    e._state = 2, e._value = t, c(e);
  }
  function c(e) {
    2 === e._state && 0 === e._deferreds.length && r._immediateFn(function() {
      e._handled || r._unhandledRejectionFn(e._value);
    });
    for (var t = 0, n = e._deferreds.length;n > t;t++) {
      i(e, e._deferreds[t]);
    }
    e._deferreds = null;
  }
  function l(e, t) {
    var n = !1;
    try {
      e(function(e) {
        n || (n = !0, f(t, e));
      }, function(e) {
        n || (n = !0, u(t, e));
      });
    } catch (o) {
      if (n) {
        return;
      }
      n = !0, u(t, o);
    }
  }
  var a = setTimeout;
  r.prototype["catch"] = function(e) {
    return this.then(null, e);
  }, r.prototype.then = function(e, t) {
    var n = new this.constructor(o);
    return i(this, new function(e, t, n) {
      this.onFulfilled = "function" == typeof e ? e : null, this.onRejected = "function" == typeof t ? t : null, this.promise = n;
    }(e, t, n)), n;
  }, r.prototype["finally"] = e, r.all = function(e) {
    return new r(function(t, o) {
      function r(e, n) {
        try {
          if (n && ("object" == typeof n || "function" == typeof n)) {
            var u = n.then;
            if ("function" == typeof u) {
              return void u.call(n, function(t) {
                r(e, t);
              }, o);
            }
          }
          i[e] = n, 0 == --f && t(i);
        } catch (c) {
          o(c);
        }
      }
      if (!n(e)) {
        return o(new TypeError("Promise.all accepts an array"));
      }
      var i = Array.prototype.slice.call(e);
      if (0 === i.length) {
        return t([]);
      }
      for (var f = i.length, u = 0;i.length > u;u++) {
        r(u, i[u]);
      }
    });
  }, r.allSettled = t, r.resolve = function(e) {
    return e && "object" == typeof e && e.constructor === r ? e : new r(function(t) {
      t(e);
    });
  }, r.reject = function(e) {
    return new r(function(t, n) {
      n(e);
    });
  }, r.race = function(e) {
    return new r(function(t, o) {
      if (!n(e)) {
        return o(new TypeError("Promise.race accepts an array"));
      }
      for (var i = 0, f = e.length;f > i;i++) {
        r.resolve(e[i]).then(t, o);
      }
    });
  }, r._immediateFn = "function" == typeof setImmediate && function(e) {
    setImmediate(e);
  } || function(e) {
    a(e, 0);
  }, r._unhandledRejectionFn = function(e) {
    void 0 !== console && console && console.warn("Possible Unhandled Promise Rejection:", e);
  };
  var s = function() {
    if ("undefined" != typeof self) {
      return self;
    }
    if ("undefined" != typeof window) {
      return window;
    }
    if ("undefined" != typeof global) {
      return global;
    }
    throw Error("unable to locate global object");
  }();
  "function" != typeof s.Promise ? s.Promise = r : s.Promise.prototype["finally"] ? s.Promise.allSettled || (s.Promise.allSettled = t) : s.Promise.prototype["finally"] = e;
});
