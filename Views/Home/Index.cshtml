@{
    ViewBag.Title = "Cestovný príkaz";
}

<!DOCTYPE html>
<html lang="sk">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewBag.Title</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
        }
        .container {
            max-width: 800px;
            margin: 0 auto;
            border: 1px solid black;
            padding: 20px;
        }
        table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 20px;
        }
        table, th, td {
            border: 1px solid black;
            padding: 5px;
        }
        .info {
            display: flex;
            justify-content: space-between;
        }
        .info div {
            width: 48%;
        }
        label {
            display: block;
            margin: 5px 0;
        }
        input[type="text"], textarea {
            width: 100%;
            padding: 5px;
            margin-bottom: 10px;
        }
        button {
            margin: 10px 0;
        }
        .cesta-entry {
            margin-bottom: 10px;
        }
    </style>
    <script>
        function addCesta() {
            const cestaEntry = document.querySelector('.cesta-entry').cloneNode(true);
            cestaEntry.querySelectorAll('input').forEach(input => input.value = '');
            document.querySelector('#cesty').appendChild(cestaEntry);
        }

        function autofillForm() {
            document.querySelector('input[name="zamestnavatel"]').value = "ABC Company";
            document.querySelector('input[name="priezviskoMenoTitul"]').value = "Ján Novák";
            document.querySelector('input[name="bydlisko"]').value = "Bratislava";
            document.querySelector('input[name="osobneCislo"]').value = "123456";
            document.querySelector('input[name="utvar"]').value = "IT oddelenie";
            document.querySelector('input[name="telefon"]').value = "904123456";
            document.querySelector('input[name="spolucestujuci"]').value = "Peter Horváth";
            document.querySelector('input[name="dopravnyProstriedok"]').value = "Automobil";
            document.querySelector('input[name="ciastkaVydavkov"]').value = "200";
            document.querySelector('input[name="preddavok"]').value = "100";
            document.querySelector('input[name="podpisPokladnika"]').value = "Ján Novák";
            document.querySelector('input[name="datumPodpisPokladnika"]').value = "2024-09-01";
            document.querySelector('input[name="odTime"]').value = "08:00"; 
            document.querySelector('input[name="doTime"]').value = "16:00"; // Predvyplnený čas "od"

            // Automatické vyplnenie sekcie Cesty
            let cestaEntries = document.querySelectorAll('.cesta-entry');
            cestaEntries[0].querySelector('input[name="zaciatokCesty"]').value = "Bratislava, 2024-09-01, 08:00";
            cestaEntries[0].querySelector('input[name="mestoRokovania"]').value = "Praha";
            cestaEntries[0].querySelector('input[name="ucelCesty"]').value = "Obchodné rokovanie";
            cestaEntries[0].querySelector('input[name="koniecCesty"]').value = "Praha, 2024-09-02, 18:00";

            // Ak chcete pridať ďalšie cesty automaticky
            if (cestaEntries.length < 2) {
                addCesta();
                cestaEntries = document.querySelectorAll('.cesta-entry');
                cestaEntries[1].querySelector('input[name="zaciatokCesty"]').value = "Košice, 2024-09-05, 10:00";
                cestaEntries[1].querySelector('input[name="mestoRokovania"]').value = "Žilina";
                cestaEntries[1].querySelector('input[name="ucelCesty"]').value = "Interné školenie";
                cestaEntries[1].querySelector('input[name="koniecCesty"]').value = "Žilina, 2024-09-06, 17:00";
            }
    }

    // Automatický výpočet času "do" na základe času "od" a pracovného času
    function calculateEndTime() {
        var odTime = document.querySelector('input[name="odTime"]').value;
        var pracovnyCas = parseInt(document.querySelector('input[name="pracovnyCas"]').value);

        if (odTime) {
            var odParts = odTime.split(":");
            var odHours = parseInt(odParts[0]);
            var odMinutes = parseInt(odParts[1]);

            var doHours = odHours + pracovnyCas;
            if (doHours >= 24) {
                doHours -= 24;
            }

            var doTime = ('0' + doHours).slice(-2) + ":" + ('0' + odMinutes).slice(-2);
            document.querySelector('input[name="doTime"]').value = doTime;
        }
    }
    </script>


     <script src="//ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js" type="text/javascript"></script>
        <script type="text/javascript" src="https://www.slovensko.sk/static/zep/dbridge_js/v1.0/config.js"></script>
        <script type="text/javascript"
            src="https://www.slovensko.sk/static/zep/dbridge_js/v1.0/dCommon.min.js"></script>
        <script type="text/javascript"
            src="https://www.slovensko.sk/static/zep/dbridge_js/v1.0/dSigXades.min.js"></script>
        <script type="text/javascript"
            src="https://www.slovensko.sk/static/zep/dbridge_js/v1.0/dSigXadesBp.min.js"></script>
        <script type="text/javascript"
            src="https://www.slovensko.sk/static/zep/dbridge_js/v1.0/dSigXadesExtender.min.js"></script>
        </script>

     @* <script>

            ditec.dSigXadesJs.detectSupportedPlatforms(["java", "dotNet", "dLauncherJava", "dLauncherDotNet"], {
                onSuccess: (data) => {
                    console.log('Podporovane platformy: ' + data)
                }
            });

            function sign_documment() {
               function Callback(onSuccess) {
				this.onSuccess = onSuccess;
				this.onError = function(e) {
					alert("Chyba: " + e);
				}
			}					
        </script> *@


@using System.Web

<script>
    @{
        // Obtain the Base64 content using your C# method
        var base64Content = SIPVS.LoadPdf.LoadFileAsBase64("wwwroot\\example.pdf");
        var encodedBase64Content = HttpUtility.UrlEncode(base64Content);
        
        // print the first 20 characters of the base64 content  
        Console.WriteLine(base64Content.Substring(0, 20));
        File.WriteAllText("base64content.txt", base64Content);
    }

</script>

    <script>

            function Callback(onSuccess) {
                this.onSuccess = onSuccess;
                this.onError = function (e) {
                    alert("Chyba: " + e);
                };
            }

        async function executeScript() {

            var xmlData = await loadXML();
            var xsdData = await loadXSD();
            var xslData = await loadXSL();

        
            // Sign the document
            ditec.dSigXadesJs.deploy(null, new Callback(function () {

                ditec.dSigXadesJs.initialize(new Callback(function () {
                    //  function(objectId, objectDescription, sourcePdfBase64, password, objectFormatIdentifier, reqLevel, convert, callback) {
                    ditec.dSigXadesJs.addXmlObject2("objectId_3", "Cestovny prikaz", xmlData, xsdData, "http://travelorder.example.com/sipvs", "http://travelorder.example.com/sipvs", xslData, "http://travelorder.example.com/sipvs", 'HTML', new Callback(function () {

                        ditec.dSigXadesJs.addPdfObject(
                                    "objectId_2",
                                    "Podpisovany pdf subor",
                                    decodeURIComponent("@encodedBase64Content"), 
                                    "",
                                    "http://example.com/objectFormatIdentifier",
                                    2,
                                    false, new Callback(function () {

                            ditec.dSigXadesJs.sign20("signatureId", "http://www.w3.org/2001/04/xmlenc#sha256", "urn:oid:1.3.158.36061701.1.2.3", "dataEnvelopeId", "http://dataEnvelopeURI", "dataEnvelopeDescr", new Callback(function () {

                                ditec.dSigXadesJs.getSignedXmlWithEnvelope(new Callback(function (ret) {
                                    // returned signed document
                                    // Format XML
                                    const xmlDoc = new DOMParser().parseFromString(ret, 'text/xml');
                                    const serializer = new XMLSerializer();
                                    const formattedXML = serializer.serializeToString(xmlDoc);

                                    // Save XML to a new file
                                    const blob = new Blob([formattedXML], { type: 'text/xml' });
                                    const url = URL.createObjectURL(blob);
                                    const a = document.createElement('a');
                                    a.href = url;
                                    a.download = 'signed.xml';
                                    a.click();
                                    URL.revokeObjectURL(url);
                                }));
                            }));
                        }));
                    }));
                }));
            }));
        }
     


    async function loadXML() {
    try {
        const response = await fetch('/Home/XmlData');  // Correct route to HomeController action
        const xmlText = await response.text();
        @* console.log(xmlText); *@
        return xmlText;
    } catch (error) {
        console.error('Error loading XML:', error);
    }
}

async function loadXSD() {
    try {
        const response = await fetch('/Home/XsdData');  // Correct route to HomeController action
        const xsdText = await response.text();
        @* console.log(xsdText); *@
        return xsdText;
    } catch (error) {
        console.error('Error loading XSD:', error);
    }
}

async function loadXSL() {
    try {
        const response = await fetch('/Home/XslData');  // Correct route to HomeController action
        const xslText = await response.text();
        @* console.log(xslText); *@
        return xslText;
    } catch (error) {
        console.error('Error loading XSL:', error);
    }
}

    </script>





</head>
<body>
    <div class="container">
        <h1>CESTOVNÝ PRÍKAZ</h1>
        
        <!-- Formulár -->
        <form method="post">
            <div class="info">
                <div>
                    <label>Zamestnávateľ</label>
                    <input type="text" name="zamestnavatel" value="ABC Company" />

                    <label>Priezvisko, meno, titul</label>
                    <input type="text" name="priezviskoMenoTitul" placeholder="Ján Novák" />

                    <label>Bydlisko</label>
                    <input type="text" name="bydlisko" placeholder="Bratislava" />

                    <label style="display: inline-block;">Normálny pracovný čas</label>
                    <input type="text" name="pracovnyCas" value="8" style="display: inline-block; width: 15px;" /> hodín

                    <label style="display: inline-block; margin-left: 120px;">od</label>
                    <input type="time" name="odTime" id="od" onchange="calculateEndTime()" required style="display: inline-block;" />
                    <label style="display: inline-block">do</label>
                    <input type="time" name="doTime" id="do" readonly style="display: inline-block;" />
                </div>
                <div>
                    <label>Osobné číslo</label>
                    <input type="text" name="osobneCislo" placeholder="123456" />

                    <label>Útvar</label>
                    <input type="text" name="utvar" placeholder="IT oddelenie" />

                    <label>Telefón, klapka</label>
                    <input type="text" name="telefon" placeholder="904123456" />
                </div>
            </div>

            <!-- Opakujúca sa sekcia: Cesty -->
            <div id="cesty">
                <div class="cesta-entry">
                    <h3>Cesta</h3>
                    <label>Začiatok cesty (miesto, dátum, hodina)</label>
                    <input type="text" name="zaciatokCesty" placeholder="Bratislava, 2024-09-01, 08:00"/>

                    <label>Mesto rokovania</label>
                    <input type="text" name="mestoRokovania" placeholder="Praha" />

                    <label>Účel cesty</label>
                    <input type="text" name="ucelCesty" placeholder="Obchodné rokovanie"/>

                    <label>Koniec cesty (miesto, dátum)</label>
                    <input type="text" name="koniecCesty" placeholder="Praha, 2024-09-02, 18:00"/>
                </div>
            </div>
            <button type="button" onclick="addCesta()">Pridať ďalšiu cestu</button>

            <!-- Doplňujúce informácie -->
            <h3>Doplnkové informácie</h3>
            <label>Spolucestujúci</label>
            <input type="text" name="spolucestujuci" placeholder="Peter Horváth"/>

            <label>Určený dopravný prostriedok</label>
            <input type="text" name="dopravnyProstriedok" placeholder="Automobil"/>

            <label>Predpokladaná čiastka výdavkov v EUR</label>
            <input type="text" name="ciastkaVydavkov" placeholder="200"/>

            <label>Povolený preddavok v EUR</label>
            <input type="text" name="preddavok" placeholder="100"/>

            <!-- Podpisy -->
            <h3>Podpisy</h3>
            <label>Podpis pokladníka</label>
            <input type="text" name="podpisPokladnika"/>

            <label>Dátum podpisu pokladníka</label>
            <input type="text" name="datumPodpisPokladnika"/>

            <!-- Tlačidlá -->
            <button type="button" onclick="autofillForm()">Automaticky vyplniť formulár</button>
            <button type="submit" formaction="/Home/GenerateXml">Ulož XML</button>
            <button type="submit" formaction="/Home/ValidateXml">Over XML voči XSD</button>
            <button type="submit" formaction="/Home/TransformXmlToHtml">Transformuj XML do HTML</button>
            <button type="submit" id="podpis" >Podpíš dokument</button>
        </form>


<script>

       // Attach a click event listener to the button
        document.getElementById("podpis").addEventListener("click", executeScript);

</script>
        <script>
        // Keď používateľ zadá čas "od", vypočíta čas "do"
        document.getElementById('od').addEventListener('change', function() {
            var odTime = this.value;
            var workingHours = parseFloat(document.getElementById('pracovnyCas').value);

            if (odTime) {
                // Rozdeľ čas "od" na hodiny a minúty
                var odParts = odTime.split(':');
                var odHours = parseInt(odParts[0]);
                var odMinutes = parseInt(odParts[1]);

                // Pripočítaj pracovné hodiny k času "od"
                var doHours = odHours + workingHours;
                if (doHours >= 24) {
                    doHours -= 24;  // Nastav správny čas, ak presiahne 24 hodín
                }

                // Nastav čas "do"
                var doTime = ('0' + doHours).slice(-2) + ':' + ('0' + odMinutes).slice(-2);
                document.getElementById('do').value = doTime;
            }
        });
</script>
    </div>
</body>
</html>
